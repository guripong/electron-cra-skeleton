{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["console","log","global","window","ipcRenderer","App","React","useEffect","className","onClick","response_from_main","sendSync","send","on","event","arg","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kJAGAA,QAAQC,IAAI,cACZD,QAAQC,IAAIC,OAAOC,QACnB,IAAMC,EAAcD,OAAOC,YAmCZC,MAjCf,WAsBE,OALAC,IAAMC,WAAU,WACdP,QAAQC,IAAI,wBAEZ,IAGA,sBAAKO,UAAU,MAAf,4CACa,uBADb,kCAEkB,uBAFlB,6BAII,wBAAQC,QAxBS,WAErBT,QAAQC,IAAI,6BACZ,IAAIS,EAAqBN,EAAYO,SAAS,sBAAuB,UACrEX,QAAQC,IAAKS,EAAoB,wBAoB7B,0CACA,wBAAQD,QAnBU,WACtBL,EAAYQ,KAAK,uBAAwB,UACzCZ,QAAQC,IAAI,sFACZG,EAAYS,GAAG,sBAAsB,SAACC,EAAOC,GACzCf,QAAQC,IAAIc,EAAM,2BAelB,+CCvBOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdjB,QAAQC,IAAR,gBAA6BwB,qLAO7BC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAGFC,SAASC,eAAe,SAM1Bd,K","file":"static/js/main.fdf63590.chunk.js","sourcesContent":["\nimport React from 'react';\n\nconsole.log(\"@@app.js@@\")\nconsole.log(global.window)\nconst ipcRenderer = window.ipcRenderer;\n\nfunction App() {\n  \n  \n  const handleTestSync = ()=>{\n      ///////////////동기(synchronous) 사용법  blocking방식입니다 응답을 기다립니다. 변수에 응답값이 할당될때까지 기다립니다///////////////\n    console.log(\"야를 보냄\");\n    var response_from_main = ipcRenderer.sendSync('synchronous-message', '야');\n    console.log( response_from_main+ \"가 왔음\") // \"pong\"이 출력됩니다.\n  }\n  const handleTestAsync = ()=>{\n    ipcRenderer.send('asynchronous-message', '있'); //main.js에 잇을 보냄\n    console.log(\"있 보냄 1초뒤 메시지도착해야함\");\n    ipcRenderer.on('asynchronous-reply', (event, arg) => {\n        console.log(arg + \"이 왔음\") // main.js에서 메세지가 온것에 대한 다시응답\n    })\n  }\n  \n  React.useEffect(()=>{\n    console.log(\"안쪽임\")\n\n  },[])\n  \n  return (\n    <div className=\"App\">\n      ctr+r 새로고침 <br/>\n      ctr+shift+i  콘솔창<br/>\n        리엑트앱 a\n        <button onClick={handleTestSync}>sync통신확인</button>\n        <button onClick={handleTestAsync}>async통신확인</button>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nconsole.log(`process.env: `, process.env);\n// ReactDOM.render(\n//     <App />\n//   ,\n//   document.getElementById('root')\n// );\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}